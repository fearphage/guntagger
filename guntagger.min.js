function invalid(a){if("object"!=typeof a)return console.warn("Only objects can be tagged"),!0}function pushTag(a,b){a.get(scope+b).val(function(c){a.get(scope+"TAGS").init().path(b).put(c)})}function serialize(a,b,c){return b=Array.prototype.slice.call(b),b.forEach(function(b){a[c](b)}),a}function tagsToArray(a){var b=[];return Object.keys(a).forEach(function(c){1==a[c]&&b.push(c)}),b}var scope="guntagger/";Gun.chain.tag=function(a){return console.log(a),1!==arguments.length?serialize(this,arguments,"tag"):this.val(function(b){if(invalid(b))return console.log("%s is not an object",b),this;this.get(scope+a).init().path(b._["#"]).put(b),pushTag(this,a);var c={};c[a]=1,this.path("tags").put(c)})},Gun.chain.untag=function(a){return 1!==arguments.length?serialize(this,arguments,"untag"):this.val(function(b){return invalid(b)?this:void this.path("tags").path(a).put(0)})},Gun.chain.tagged=function(a,b,c){return 0===arguments.length?this.get(scope+"TAGS"):a||"string"==typeof a?void gun.get(scope+a).map().val(function(d,e){gun.get(d.tags).val(function(e){delete e._,delete d.tags,c?b(d,tagsToArray(e)):1==e[a]&&b(d,tagsToArray(e))})}):this};